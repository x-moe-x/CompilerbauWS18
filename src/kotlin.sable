Package kotlin;

Helpers
	all 	= [0..0xffff];

	non_zero_digit = ['1' .. '9'];
	digit = '0' | non_zero_digit;
	digits = digit+;

	tab  	= 0x0009;
	lf  	= 0x000a;
	cr  	= 0x000d;
	sp 		= ' ';

	line_terminator = lf | cr | cr lf;
	input_character = [all - [cr + lf]];

	not_star =    [input_character - '*'] | line_terminator;
  	not_star_not_slash = [input_character - ['*' + '/']] | line_terminator;

	letter	= [['a' .. 'z']+['A'..'Z']];
	java_letter = letter | '$' | '_';
	java_letter_or_digit = letter | digit | '$' | '_';

Tokens
	// keywords
	var = 'var';
	fun = 'fun';

	// pseudo keywords from preamble
	main = 'main';
	args = 'args';
	string = 'String';
	array = 'Array';

	l_par = '(';
	r_par = ')';
	l_brc = '{';
	r_brc = '}';
	or = '||';
	and = '&&';
	neq = '!=';
	eq = '==';
	assign = '=';
	leq = '<=';
	geq = '>=';
	lt = '<';
	gt = '>';
	plus = '+';
	minus = '-';
	star = '*';
	slash = '/';
	percent = '%';
	not = '!';
	colon = ':';
	semi = ';';

	integer_literal = '0' | non_zero_digit digits?;
	boolean_literal = 'true' | 'false';

	type = 'Int' | 'Boolean';

	identifier = java_letter java_letter_or_digit*;

	white_space = (sp | tab | line_terminator)*;

	traditional_comment = '/*' not_star+ '*'+ (not_star_not_slash not_star* '*'+)* '/';
	end_of_line_comment = '//' input_character* line_terminator?;

Ignored Tokens
	white_space,
	traditional_comment,
	end_of_line_comment;

Productions
	start =
		fun main l_par args colon array lt string gt r_par l_brc r_brc;

	assignment =
		identifier assign or_expression semi;

	var_declaration =
		var identifier colon type assign or_expression semi;

	or_expression =
		{and} and_expression |
		{or} or_expression or and_expression;

	and_expression =
		{eq} eq_expression |
		{and} and_expression and eq_expression;

	eq_expression =
		{rel} rel_expression |
		{eq} eq_expression eq_op rel_expression;

	rel_expression =
		{add} add_expression |
		{rel} rel_expression rel_op add_expression;

	add_expression =
		{mult} mult_expression |
		{add} add_expression add_op mult_expression;

	mult_expression =
		{unary} unary_expression |
		{mult} mult_expression mult_op unary_expression;

	unary_expression =
		{plain} literal_constant |
		{unary} unary_op unary_expression;

	eq_op =
		{neq} neq |
		{eq} eq;

	rel_op =
		{lt} lt |
		{gt} gt |
		{leq} leq |
		{geq} geq;

	add_op =
		{plus} plus |
		{minus} minus;

	mult_op =
		{mult} star |
		{div} slash |
		{mod} percent;

	unary_op =
		{not} not |
		{plus} plus |
		{minus} minus;

	literal_constant =
		{bool} boolean_literal |
		{integer} integer_literal;
