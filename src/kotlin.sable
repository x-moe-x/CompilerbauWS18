Package kotlin;

Helpers
	all 	= [0..0xffff];

	letter	= [['a' .. 'z']+['A'..'Z']];
	digit 	= ['0' .. '9'];

	ht  	= 0x0009;
	lf  	= 0x000a;
	ff  	= 0x000c;
	cr  	= 0x000d;
	sp 		= ' ';

	line_terminator = lf | cr | cr lf;
	input_character = [all - [cr + lf]];

	java_letter = letter | '$' | '_';
	java_letter_or_digit = letter | digit | '$' | '_';

Tokens
	// keywords
	fun = 'fun';

	// separators
	l_par = '(';
	r_par = ')';
	l_brc = '{';
	r_brc = '}';
	colon = ':';
	comma = ',';
	dot = ',';
	semi = ';';

	// operators
	gt = '>';
	lt = '<';

	simple_name = java_letter java_letter_or_digit*;

	white_space = (sp | ht | ff | line_terminator)*;

Ignored Tokens
	white_space;

Productions
	function =
		fun simple_name value_parameters function_body?;

	value_parameters =
		{non_empty} l_par function_parameters r_par |
		{empty} l_par r_par;

	function_parameters =
		{single} function_parameter |
		{multiple} function_parameters comma function_parameter;

	function_parameter =
		parameter;

	parameter =
		simple_name colon type;

	type =
		type_reference;

	type_reference =
		user_type;

	user_type =
		simple_user_types;

	simple_user_types =
		{single} simple_user_type |
		{multiple} simple_user_types dot simple_user_type;

	simple_user_type =
		simple_name template_parameters?;

	template_parameters =
		lt template_parameter gt;

	template_parameter =
		{single} type |
		{multiple} template_parameter colon type;

	function_body =
		block;

	block =
		l_brc statements r_brc;

	statements =
		semi* statement_list [semis]:semi*;

	statement_list =
		{single} statement |
		{multiple} statement_list semi+ statement;

	statement = gt;
